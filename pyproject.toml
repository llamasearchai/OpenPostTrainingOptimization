[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "openposttraining"
version = "1.1.1"
description = "OpenPostTrainingOptimizations: Portable post-training optimization tools for CUDA, MPS, and MLX with AI agents integration"
readme = "README.md"
requires-python = ">=3.10"
authors = [{ name = "Nik Jois" }]
license = { text = "Apache-2.0" }
keywords = [
  "ml",
  "quantization",
  "pruning",
  "inference",
  "mlx",
  "mps",
  "cuda",
  "ai",
  "llm",
  "ollama",
  "openai-agents",
  "agents",
  "datasette",
  "sqlite",
  "sqlite-utils",
  "cli",
  "tui",
  "python",
  "uv",
  "tox",
  "hatch",
  "docker",
  "devtools",
]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: MacOS",
  "Operating System :: POSIX :: Linux",
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
  "torch>=2.1",
  "transformers>=4.40",
  "datasets>=2.17",
  "accelerate>=0.28",
  "psutil>=5.9",
  "rich>=13.7",
  "tqdm>=4.66",
  "httpx>=0.27",
  "pydantic>=2.7",
  "pyyaml>=6.0",
  "click>=8.1",
  "textual>=0.63.0",
]

[project.optional-dependencies]
apple = [
  "mlx>=0.14; platform_system == 'Darwin'",
  "mlx-lm>=0.16; platform_system == 'Darwin'",
  "optimum-quanto>=0.2.0",
  "coremltools>=6.3; platform_system == 'Darwin'",
  "llama-cpp-python>=0.2.80",
]
cuda = [
  "bitsandbytes>=0.43; platform_system != 'Darwin'",
  "flash-attn>=2.5; platform_system != 'Darwin'",
  "triton>=2.1; platform_system != 'Darwin'",
  "vllm>=0.4.2; platform_system != 'Darwin'",
  "py3nvml>=0.2.7; platform_system != 'Darwin'",
  "gpustat>=1.1; platform_system != 'Darwin'",
]
serve = [
  "fastapi>=0.111",
  "uvicorn>=0.29",
  "sse-starlette>=2.1",
]
agents = [
  "openai>=1.30.0",
  "ollama>=0.2.0",
  "llm>=0.14",
]
data = [
  "datasette>=0.64",
  "sqlite-utils>=3.36",
  "sqlalchemy>=2.0",
  "aiosqlite>=0.20",
]
dev = [
  "pytest>=8.2",
  "pytest-asyncio>=0.23",
  "pytest-cov>=5.0",
  "pytest-xdist>=3.6",
  "pytest-benchmark>=4.0",
  "pytest-timeout>=2.3",
  "hypothesis>=6.100",
  "ruff>=0.6",
  "mypy>=1.8",
  "black>=24.0",
  "isort>=5.13",
  "pre-commit>=3.7",
  "bandit>=1.7",
  "safety>=3.2",
  "tox>=4.15",
  "hatch>=1.12",
]
all = [
  "openposttraining[apple,cuda,serve,agents,data,dev]",
]

[project.scripts]
opt = "openposttraining.cli:main"
opt-tui = "openposttraining.tui.main:app"

[project.urls]
Homepage = "https://github.com/nikjois/openposttraining"
Documentation = "https://github.com/nikjois/openposttraining/blob/main/README.md"
Issues = "https://github.com/nikjois/openposttraining/issues"
Source = "https://github.com/nikjois/openposttraining"

[tool.hatch.version]
path = "src/openposttraining/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/openposttraining"]

[tool.hatch.build.targets.sdist]
include = [
  "/src",
  "/tests",
  "/README.md",
  "/LICENSE",
  "/CHANGELOG.md",
]

[tool.hatch.envs.default]
dependencies = [
  "pytest>=8.2",
  "pytest-cov>=5.0",
  "pytest-asyncio>=0.23",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=openposttraining --cov-report=term-missing --cov-report=html --cov-report=xml {args:tests}"
lint = "ruff check src tests"
format = "ruff format src tests"
type-check = "mypy src"

[tool.hatch.envs.dev]
dependencies = [
  "pytest>=8.2",
  "pytest-cov>=5.0",
  "pytest-asyncio>=0.23",
  "pytest-xdist>=3.6",
  "ruff>=0.6",
  "mypy>=1.8",
  "black>=24.0",
  "isort>=5.13",
  "bandit>=1.7",
  "hypothesis>=6.100",
]

[tool.hatch.envs.dev.scripts]
test = "pytest -n auto {args:tests}"
cov = "pytest --cov=openposttraining --cov-report=term-missing --cov-report=html --cov-report=xml --cov-fail-under=100 {args:tests}"
lint = "ruff check --fix src tests"
format = "ruff format src tests && black src tests && isort src tests"
type = "mypy --strict src"
security = "bandit -r src"
all = "format && lint && type && security && cov"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["openposttraining*"]
namespaces = false

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
  "-ra",
  "--strict-markers",
  "--strict-config",
  "--showlocals",
  "--tb=short",
]
markers = [
  "cuda: mark test as requiring CUDA",
  "mps: mark test as requiring Apple MPS",
  "mlx: mark test as requiring MLX backend",
  "slow: mark test as slow running",
  "integration: mark test as integration test",
  "e2e: mark test as end-to-end test",
]
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
source = ["openposttraining"]
omit = [
  "*/tests/*",
  "*/test_*.py",
  "*/__main__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 100
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.ruff]
line-length = 100
target-version = "py310"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "F",   # pyflakes
  "I",   # isort
  "UP",  # pyupgrade
  "B",   # flake8-bugbear
  "N",   # pep8-naming
  "C4",  # flake8-comprehensions
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "RUF", # ruff-specific rules
]
ignore = [
  "E501",   # line too long (handled by formatter)
  "B008",   # function call in argument defaults
  "B905",   # zip without strict parameter
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.ruff.lint.isort]
known-first-party = ["openposttraining"]
force-single-line = false
lines-after-imports = 2

[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_return_any = true
warn_unreachable = true
strict_optional = true
strict_equality = true
check_untyped_defs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests"]
skips = ["B101"]

[tool.bandit.assert_used]
skips = ["*/test_*.py"]
